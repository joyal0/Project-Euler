/*
View->Layout->Columns 3
View->Group->Max Columns 2
*/
/*
Highly divisible triangular number 
Problem 12

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/
#include<bits/stdc++.h>
#include<iostream>
#include<cmath>
using namespace std;


int main()
{
	//Measuring starts  
    auto start = chrono::high_resolution_clock::now();
	/* Code Here */
	unsigned long long int triNo=0,target=0,count=0;
	int n;
	cout<<"Enter the no of divisors required for the least triangle no : ";
	cin>>n;
	for(unsigned long long int i=1;count<n;++i)
	{
		triNo += i;
		count = 0;
		for(unsigned long long int j=1;j<=triNo;++j)
		{
				if(j>sqrt(triNo))			//optimized to reduce time by 1/2 1st time 639.624 s
					j=triNo;			//changed condition from j>trino/2 to j>sqrt(triNo)
				if(triNo%j==0)
					++count;
				if(count>n)
				{
					cout<<triNo<<" is the required triangle no";
					target =-1;
					break;
				}
		}
		if(target==-1)
			break;
	}

			
	// code to measure
    auto end = chrono::high_resolution_clock::now();
    auto duration = chrono::duration_cast<chrono::nanoseconds>(end - start).count() * 1e-9;

    cout << "Execution time: " << duration << " s" << endl;
    return 0;

}
